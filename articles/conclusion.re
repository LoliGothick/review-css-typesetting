= まとめ

ここまでで、筆者的には割りとそれっぽいPDFが得られるようになりました。
後は細部を詰めるのと、識者に赤を入れてもらい泣きながら修正する、というのが次の一手でしょうか。
フォント埋込…ｳｯ頭が！

この技法の研鑽が積まれ、紙、電子、Webという3つの出力結果が高品位になっていくと嬉しいです。
現状、電子といってもPDF以外の出力をTechBoosterやひかる黄金わかめ帝国では出していません。
リフロー可能な形式であるepubについては、見た目を整えるコストは高く、epubを求める需要は大変低いため、ないがしろにされています。
しかし、1つの出力先を改善すると全体が改善されるとなると、多少のコストを払う覚悟ができるでしょう。

また、我々は同人誌の組版をしたい、というのもCSS組版に対して有利に働きます。
プロユースの組版というのはナレッジの塊で、Re:VIEW開発者会議などで話を聞く心底関心してしまいます。
プロは細部のこだわりが凄まじく、なおかつそれを捨てられない場合が多くあるようです。
つまり、プロが既存技法を捨てCSS組版に移行する場合、大変な労力が要求されるのです。
一方、我々は素人で同人ですので、"それっぽさ"がある程度高まれば満足することができますし、読者もそれで満足できるでしょう。
プロの組版と素人の組版の差は、筆者は"ABテストをしたらプロが勝つが、素人の組版に明確な不備を指摘できる素人はいない"という感じだと筆者は思っています。

CSS組版自体はまだまだブラウザのサポートが十分ではないのが現状です。
つまり、筆者が意図したルックアンドフィールを少ない労力で得られる環境では（まだ）ない、ということです。
このあたりは、Dockerイメージの提供や本の素体を提供するなどで、CSS組版の高速道路が整備されればある程度無視することができます。

そして、ブラウザ側の思惑です。
ブラウザはインターネット上のWebページを閲覧するのが主目的です。
別に紙面をレンダリングしたりPDFを生成したりする組版エンジンになりたいわけではない、というのが大多数のコミッタの思いなのではないでしょうか。
つまり、人的資源が少ないため、Web関連技術にしては仕様の策定や実装の進み方がかなりゆっくりであると感じます。
ブラウザベンダのコミッタに話を聞いたわけではありませんので、実際にPaged Media周りの実装に絡んでいる人の話を聞いてみたいところです。

CSS組版が手法として確立したら、みんなが簡単にこのワークフローを使えるよう各所にコントリビュートしていきたいところですね。
まずは今回作ったCSSの完成度をあげていく必要があります。
改善すべき箇所や、取り込むべき技術があれば、ぜひGitHubのリポジトリまでIssueやPull Requestを送ってきてください。
次の技術書典でCSS組版で作られた本を増やすのは君だ！

//comment{
TODO 残タスク的な
 * 先達の確認と真似っこ
 * 既存の何かの本の組版を参考にする
 * ResetCSS系の何かっているんか？？
 * HTMLBuilderを改造してページ内リンクを修正する
 ** クリックするとdareka.htmlへのリンクになってたりする
 * https://www.npmjs.com/package/vivliostyle
 ** ライセンス問題
 ** 毎回AGPLってどこまでアレなのかとか理解できない話
 ** gccでコンパイルしたソフトウェアのこととかあんまし気にしないしさほど気にするユースケースじゃない気もする
//}

//comment{
参考資料的な
 * http://vivliostyle.github.io/vivliostyle.js/samples/css-secrets-long/doc/index.xhtml
 * ノンブル
 ** http://libroworks.co.jp/?p=646 ノンブルでページ内検索
 * https://twitter.com/vvakame/status/976395216872652801
 * https://www.antenna.co.jp/AHF/ahf5/CSSInfo/CSS-Page-Tutorial.pdf
 * 脚注の採番とかの良さそうなサンプル
 ** https://github.com/vivliostyle/vivliostyle.js/issues/406
 * https://libroworks.co.jp/?p=838
//}
